//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KM_Image_Processing_Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IImageProcessingService")]
    public interface IImageProcessingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageProcessingService/GetProcessingData", ReplyAction="http://tempuri.org/IImageProcessingService/GetProcessingDataResponse")]
        void GetProcessingData(System.Nullable<bool> isHorizontalFlip, System.Nullable<bool> isVerticalFlip, System.Nullable<bool> isGrayScale, System.Nullable<bool> isEntropyCrop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageProcessingService/GetProcessingData", ReplyAction="http://tempuri.org/IImageProcessingService/GetProcessingDataResponse")]
        System.Threading.Tasks.Task GetProcessingDataAsync(System.Nullable<bool> isHorizontalFlip, System.Nullable<bool> isVerticalFlip, System.Nullable<bool> isGrayScale, System.Nullable<bool> isEntropyCrop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageProcessingService/ProcessImage", ReplyAction="http://tempuri.org/IImageProcessingService/ProcessImageResponse")]
        System.IO.Stream ProcessImage(System.IO.Stream imgStream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageProcessingService/ProcessImage", ReplyAction="http://tempuri.org/IImageProcessingService/ProcessImageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> ProcessImageAsync(System.IO.Stream imgStream);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageProcessingServiceChannel : KM_Image_Processing_Client.ServiceReference.IImageProcessingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageProcessingServiceClient : System.ServiceModel.ClientBase<KM_Image_Processing_Client.ServiceReference.IImageProcessingService>, KM_Image_Processing_Client.ServiceReference.IImageProcessingService {
        
        public ImageProcessingServiceClient() {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageProcessingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageProcessingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetProcessingData(System.Nullable<bool> isHorizontalFlip, System.Nullable<bool> isVerticalFlip, System.Nullable<bool> isGrayScale, System.Nullable<bool> isEntropyCrop) {
            base.Channel.GetProcessingData(isHorizontalFlip, isVerticalFlip, isGrayScale, isEntropyCrop);
        }
        
        public System.Threading.Tasks.Task GetProcessingDataAsync(System.Nullable<bool> isHorizontalFlip, System.Nullable<bool> isVerticalFlip, System.Nullable<bool> isGrayScale, System.Nullable<bool> isEntropyCrop) {
            return base.Channel.GetProcessingDataAsync(isHorizontalFlip, isVerticalFlip, isGrayScale, isEntropyCrop);
        }
        
        public System.IO.Stream ProcessImage(System.IO.Stream imgStream) {
            return base.Channel.ProcessImage(imgStream);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> ProcessImageAsync(System.IO.Stream imgStream) {
            return base.Channel.ProcessImageAsync(imgStream);
        }
    }
}
